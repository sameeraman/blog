<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Crazy Cloud Ideas</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://sameeraman.github.io/"/>
  <updated>2020-10-05T15:37:38.755Z</updated>
  <id>https://sameeraman.github.io/</id>
  
  <author>
    <name>Sameera Perera</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sameeraman.github.io/2020/10/05/hello-world/"/>
    <id>https://sameeraman.github.io/2020/10/05/hello-world/</id>
    <published>2020-10-05T15:37:38.755Z</published>
    <updated>2020-10-05T15:37:38.755Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Connect Ubiquiti USG to Azure VWAN Gateway using BGP</title>
    <link href="https://sameeraman.github.io/2020/10/05/usg2vwanbgp/"/>
    <id>https://sameeraman.github.io/2020/10/05/usg2vwanbgp/</id>
    <published>2020-10-05T09:34:48.000Z</published>
    <updated>2020-10-05T15:37:38.759Z</updated>
    
    <content type="html"><![CDATA[<p>In this blog post, I’m going to be sharing my knowledge that I gathered during a lab setup. Last weekend, I was playing with Ubiquiti USG BGP features and was wondering If I could establish BGP peering with my Azure VPN Gateway. This way, it could dynamically exchange routes between my home network and Azure. I typically have a hybrid networking configured between my home network and Azure. My Azure network is very dynamic, I create new VNETs and delete VNETs very often. Managing static routes in my home router and IP Sec tunnels in each setup has been very cumbersome. Therefore, my curious mind was always looking for a smarter way to do this. If you are in this same boat, join with me.<br>In summary, BGP peering’s can be established between the Ubiquity USG and the Azure Gateway enabled with BGP. In this blog post, I’m focusing more on the USG configuration and assume that you can setup the rest of the environment by yourself. To explain how this can be setup, I’m going to use my lab as an example. Following is a diagram of my setup. </p><p>![Lab Setup Diagram](/blog /usg2vwanbgp/diagram.png)</p><p>Following are the key properties of the setup that you need to be aware. </p><p><strong>Home Network</strong><br>IP Addressing used in the Home network – 10.1.1.0/24<br>Static Public IP on the USG – 113.76.252.224<br>BGP Peering IP on the USG – 10.1.1.1</p><p><strong>Azure Network – VWAN</strong><br>VPN Gateway Public IP – 21.52.125.78<br>Azure Gateway Peering IP – 10.0.1.14<br>VWAN Hub IP Address space – 10.0.1.0/24<br>VNET IP Address Space – 10.10.0.0/16</p><p>Note that in Azure I have used Azure VWAN for hub and spoke topology. To learn more about Azure VWAN <a href="https://azure.microsoft.com/en-us/services/virtual-wan/" target="_blank" rel="noopener">click here</a>. Azure VWAN Hub can have VPN Gateways. I assume that you have setup the Azure Networking piece beforehand, and I’m not going to be covering that piece in this article. By default, it creates two VPN gateway instances. See below screenshot which displays the properties of the two gateways. </p><p>![VWAN Gateway instances](/blog /usg2vwanbgp/gatewayproperties.png)</p><p>In this case I have used only one gateway instance as my home network has only one gateway. </p><p>Now you have all the details required for the VPN to setup. Let’s look at how to configure the USG. Unfortunately, USG configuration can’t be done via the GUI. You will need to use the advance configuration file config.gateway.json. For more details about the advanced configuration file visit this <a href="https://help.ui.com/hc/en-us/articles/215458888-UniFi-USG-Advanced-Configuration-Using-config-gateway-json#:~:text=Introduction-,The%20config.,available%20in%20the%20web%20GUI." target="_blank" rel="noopener">documentation</a>.<br>This file is in the cloud key and the location is explained in the documentation. In my case it is - /srv/unifi/data/sites/<sitename>. If you are editing this for the first time, you will need to create the file. This needs to be a valid JSON file, therefore, be careful and always validate when editing this file.<br>Add the following configuration to the file. Replace you public and local IP in here with your respective IPs. Save the configuration and do a force provision from the Cloud Key. </p><p>![Provision Button](/blog /usg2vwanbgp/provision.png)</p><p>Once the configuration is pushed. Restart the USG. </p><p>Once it’s successfully restarted, ssh into the USG. Then check the BGP status using the following commands. It should show the results as below. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show ip bgp summary</span><br></pre></td></tr></table></figure><p>![Command1](/blog /usg2vwanbgp/command1.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show ip bgp neighbor</span><br></pre></td></tr></table></figure><p>![Command2](/blog /usg2vwanbgp/command2.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show ip bgp neighbors 10.0.1.14 advertised-routes</span><br></pre></td></tr></table></figure><p>This command shows the routes advertised to the remote peer<br>![Command3](/blog /usg2vwanbgp/command3.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show ip bgp neighbors 10.0.1.14 received-routes</span><br></pre></td></tr></table></figure><p>This command shows the routes recieved from the remote peer<br>![Command4](/blog /usg2vwanbgp/command4.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show ip bgp</span><br></pre></td></tr></table></figure><p>![Command5](/blog /usg2vwanbgp/command5.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show ip route</span><br></pre></td></tr></table></figure><p>![Command6](/blog /usg2vwanbgp/command6.png)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this blog post, I’m going to be sharing my knowledge that I gathered during a lab setup. Last weekend, I was playing with Ubiquiti USG
      
    
    </summary>
    
    
      <category term="Networking" scheme="https://sameeraman.github.io/categories/networking/"/>
    
    
      <category term="Networking" scheme="https://sameeraman.github.io/tags/networking/"/>
    
      <category term="VWAN" scheme="https://sameeraman.github.io/tags/vwan/"/>
    
      <category term="Ubiquiti" scheme="https://sameeraman.github.io/tags/ubiquiti/"/>
    
  </entry>
  
  <entry>
    <title>Web App Private Endpoints vs Service Endpoints vs App Service Environments</title>
    <link href="https://sameeraman.github.io/2020/07/09/internalwebapphostingoptions/"/>
    <id>https://sameeraman.github.io/2020/07/09/internalwebapphostingoptions/</id>
    <published>2020-07-09T10:34:48.000Z</published>
    <updated>2020-10-05T15:37:38.755Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I got an opportunity to compare the Private Endpoint for Web Apps, Service Endpoints for Web Apps and App Service Environments. I thought it would be good to write a blog post on the observations and the comparison I learned. Limiting the attack vector for the web applications and exposing the application only to the customer private networks is a very common requirement when you talk to customers. Therefore, this blog is about a comparison between the most commonly used hosting methods for <strong>internal-facing</strong> web applications in Azure. </p><a id="more"></a><h2 id="Private-Endpoints-for-Web-Apps"><a href="#Private-Endpoints-for-Web-Apps" class="headerlink" title="Private Endpoints for Web Apps"></a>Private Endpoints for Web Apps</h2><p>With the announcement of the <a href="https://docs.microsoft.com/en-us/azure/app-service/networking/private-endpoint" target="_blank" rel="noopener">Private Endpoints for Web Apps</a>, it opens up a new architecture for making Azure Web Apps available to the Azure Networks. This method creates a Private IP address in your virtual network dedicated for the Web App instance you choose. This private IP can be used as a secure entry point for the Web Application. This feature combined with external access blocked to the web app makes the application available only to the local network. </p><p>The traffic originating from an end-user traverse the virtual network to the private endpoint for the web app. Then it goes through the Microsoft Backbone to the Web App. It never goes to the Public Internet. Hence, this is a much secure way to have connectivity to internal-facing web applications. </p><p>![Private Endpoint for Web Apps](/blog /internalwebapphostingoptions/PrivateEndpoints.png)</p><p>The above diagram shows the high-level architecture for the private endpoint for web apps. One of the key features of this architecture is that this model works with the hybrid networking configuration as well. This means, your on-premises users can route to your web application using the private endpoint in the virtual network. This also provides additional security features. Private endpoint makes sure that only the allowed web application instance can be accessed by the private endpoint. It can not access any other service through it. Therefore, it protects you from any possible data exfiltration from your network. </p><p>Note that this feature is still in public preview as of 10/07/2020.</p><h2 id="Service-Endpoints-for-Web-Apps"><a href="#Service-Endpoints-for-Web-Apps" class="headerlink" title="Service Endpoints for Web Apps"></a>Service Endpoints for Web Apps</h2><p><a href="https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-service-endpoints-overview" target="_blank" rel="noopener">Service Endpoints</a> for Web Apps provide secure connectivity to Azure Web apps over an optmized route over the Microsoft backbone. When compared with the Private Endpoints, Service Endpoints does not provide a private IP in your network. Instead, it will add special routes to your VNet, so that the Web App traffic will route via the Microsoft backbone to the web app. Therefore, it will not leave the Microsoft network when reaching the web app. You can also combine Service Endpoints and restrict public access to only allow traffic from the virtual networks selected. </p><p>![Service Endpoint for Web Apps](/blog /internalwebapphostingoptions/ServiceEndpoints.png)</p><p>The diagram above shows the high level architecture for the Service Endpoints for web apps. One of the key functional differences in service endpoint, when compared to private endpoints, is that this provides private access to the full service in the Azure Region whereas in Private link it is only to that instance. </p><p>Service endpoints are simple to configure and easier option when compared to the other two.</p><h2 id="App-Service-Environments"><a href="#App-Service-Environments" class="headerlink" title="App Service Environments"></a>App Service Environments</h2><p>Azure <a href="https://docs.microsoft.com/en-us/azure/app-service/environment/intro" target="_blank" rel="noopener">App Service environments</a> provide a fully isolated and dedicated environment in a customer network to run web apps. This provisions a dedicated instance of the app hosting plan in your network as opposed to the multi-tenanted offerings in the other two option. This allows customers to fully control network traffic that goes in and out of the web app. </p><p>![App Service Environments](/blog /internalwebapphostingoptions/ASE.png)</p><p>The above high-level architecture diagram shows how the App service environment sits in the network. Providing internal access to the application is easy since it sits within the virtual network. If you have hybrid connectivity via an ExpressRoute or a Site-to-Site VPN, then it can route to the web application without any special configuration. </p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this post, we looked at different architecture options for hosting a Web App which is exposed to the internal network only. See the below table, as a summary of features, functionalities and complexities discussed above. </p><table><thead><tr><th>Private Endpoints</th><th>Service Endpoints</th><th>App Service Environments</th></tr></thead><tbody><tr><td>Provide Access to Web Apps over Private IP Address</td><td>Provide Access to Web Apps over optimized backbone routing</td><td>Web Apps are provisioned within the customer network</td></tr><tr><td>Access is restricted per Web App Instance</td><td>Access is restricted per Web app Service</td><td>Access restriction up to the customer as the service is in the customer network</td></tr><tr><td>Complexity: Planning and initial configuration required</td><td>Complexity: Easy to setup</td><td>Complexity: Planning and Initial configuration required</td></tr><tr><td>In-built data exfiltration protection</td><td>Traffic will need to be passed through an NVA/Firewall for exfiltration protection</td><td>N/A as the application is entirely in the customer network</td></tr><tr><td>Cost compared to the other two options: moderate</td><td>Cost compared to the other two options: Can be low and depends on the application</td><td>Cost compared to the other two options: Higher running cost</td></tr><tr><td>Multi-tenant Hosting plan</td><td>Multi-tenant Hosting plan</td><td>Dedicated hosting plan</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, I got an opportunity to compare the Private Endpoint for Web Apps, Service Endpoints for Web Apps and App Service Environments. I thought it would be good to write a blog post on the observations and the comparison I learned. Limiting the attack vector for the web applications and exposing the application only to the customer private networks is a very common requirement when you talk to customers. Therefore, this blog is about a comparison between the most commonly used hosting methods for &lt;strong&gt;internal-facing&lt;/strong&gt; web applications in Azure. &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Apps" scheme="https://sameeraman.github.io/tags/apps/"/>
    
      <category term="Networking" scheme="https://sameeraman.github.io/tags/networking/"/>
    
  </entry>
  
  <entry>
    <title>Docker Cheat Sheet</title>
    <link href="https://sameeraman.github.io/2020/07/04/dockercheatsheet/"/>
    <id>https://sameeraman.github.io/2020/07/04/dockercheatsheet/</id>
    <published>2020-07-04T09:34:48.000Z</published>
    <updated>2020-10-05T15:37:38.755Z</updated>
    
    <content type="html"><![CDATA[<p>I recently went through my second study phase around docker containers recently. Docker is a huge topic these days and widly used in the application containerization. I use Docker at home and at work in many projects. I thought it would be useful to create a Docker Cheat Sheet for my reference and share that among the community and that lead to this post. In this post, I’m going to list the most common commands used when playing with Docker containers. </p><a id="more"></a><h2 id="General-Listing-Commands"><a href="#General-Listing-Commands" class="headerlink" title="General Listing Commands"></a>General Listing Commands</h2><ul><li><p>List all docker containers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li><li><p>List running docker containers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li><li><p>List docker images in the local store</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>Download and store an image from the internet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure></li></ul><h2 id="Running-Docker-Containers"><a href="#Running-Docker-Containers" class="headerlink" title="Running Docker Containers"></a>Running Docker Containers</h2><ul><li><p>Run an instance of a container image</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu</span><br></pre></td></tr></table></figure></li><li><p>Run an instance of a container image in detached mode (run in background)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d nginx</span><br></pre></td></tr></table></figure></li><li><p>Run an instance of a Ubuntu container images with terminal and input attached. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu bash</span><br></pre></td></tr></table></figure></li></ul><h2 id="Stopping-and-Removing-Docker-Containers"><a href="#Stopping-and-Removing-Docker-Containers" class="headerlink" title="Stopping and Removing Docker Containers"></a>Stopping and Removing Docker Containers</h2><ul><li><p>Stop a running container instance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop ubuntu</span><br></pre></td></tr></table></figure></li><li><p>Remove a terminated container (Container Id = b5a12307c030)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm b5a12307c030</span><br></pre></td></tr></table></figure></li><li><p>Remove a container image from the local store</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi ubuntu</span><br></pre></td></tr></table></figure></li></ul><h2 id="Container-interaction"><a href="#Container-interaction" class="headerlink" title="Container interaction"></a>Container interaction</h2><ul><li><p>Run a container instance interactively</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker  run -it ubuntu bash</span><br></pre></td></tr></table></figure></li><li><p>Remote into a running container instance (Container id = b5a12307c030 )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it b5a12307c030 bash</span><br></pre></td></tr></table></figure></li><li><p>Execute a command in a running container Eg: ps -eaf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec b5a12307c030 ps -eaf</span><br></pre></td></tr></table></figure></li></ul><h2 id="Map-a-Port-to-a-Container"><a href="#Map-a-Port-to-a-Container" class="headerlink" title="Map a Port to a Container"></a>Map a Port to a Container</h2><ul><li>Map a host port to a new container instance (Host Port = 5000, Container Port = 80, Container image = nginx)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:5000 nginx -d</span><br></pre></td></tr></table></figure></li></ul><h2 id="Mount-a-Volume"><a href="#Mount-a-Volume" class="headerlink" title="Mount a Volume"></a>Mount a Volume</h2><ul><li>Mount a host volume to a new container (Host Volume Path = /opt/mydata, Container Mount Path = /var/lib/mysql)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v &#x2F;opt&#x2F;mydata:&#x2F;var&#x2F;lib&#x2F;mysql mysql</span><br></pre></td></tr></table></figure></li></ul><h2 id="Inspect-Container-Logs"><a href="#Inspect-Container-Logs" class="headerlink" title="Inspect Container Logs"></a>Inspect Container Logs</h2><ul><li>Inspect container logs of Container ID = b5a12307c030<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs b5a12307c030</span><br></pre></td></tr></table></figure></li></ul><h2 id="Other-Handy-Commands"><a href="#Other-Handy-Commands" class="headerlink" title="Other Handy Commands"></a>Other Handy Commands</h2><ul><li><p>Remove all excited Containers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(docker ps -q --filter &quot;status&#x3D;exited&quot;)</span><br></pre></td></tr></table></figure></li><li><p>Monitor Docker disk consumption</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I recently went through my second study phase around docker containers recently. Docker is a huge topic these days and widly used in the application containerization. I use Docker at home and at work in many projects. I thought it would be useful to create a Docker Cheat Sheet for my reference and share that among the community and that lead to this post. In this post, I’m going to list the most common commands used when playing with Docker containers. &lt;/p&gt;
    
    </summary>
    
    
      <category term="Containers" scheme="https://sameeraman.github.io/categories/containers/"/>
    
    
      <category term="Containers" scheme="https://sameeraman.github.io/tags/containers/"/>
    
      <category term="Docker" scheme="https://sameeraman.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
