{"meta":{"title":"Crazy Cloud Ideas","subtitle":"","description":"","author":"Sameera Perera","url":"https://sameeraman.github.io","root":"/blog/"},"pages":[{"title":"About","date":"2020-07-07T10:46:05.000Z","updated":"2020-10-17T16:23:07.984Z","comments":false,"path":"about/index.html","permalink":"https://sameeraman.github.io/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2020-07-07T10:44:47.000Z","updated":"2020-10-17T16:23:07.984Z","comments":false,"path":"categories/index.html","permalink":"https://sameeraman.github.io/categories/index.html","excerpt":"","text":""},{"title":"My Pet Projects","date":"2020-07-07T11:34:14.000Z","updated":"2020-10-17T16:23:07.984Z","comments":false,"path":"petprojects/index.html","permalink":"https://sameeraman.github.io/petprojects/index.html","excerpt":"","text":"This will the pet projects page"},{"title":"Tags","date":"2020-07-04T10:45:11.000Z","updated":"2020-10-17T16:23:07.984Z","comments":false,"path":"tags/index.html","permalink":"https://sameeraman.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Under the hood of this Blog","slug":"underthehood","date":"2020-10-18T09:34:48.000Z","updated":"2020-10-17T16:23:07.976Z","comments":true,"path":"2020/10/18/underthehood/","link":"","permalink":"https://sameeraman.github.io/2020/10/18/underthehood/","excerpt":"I recently decided to shift my gears with static pages for my blog. I have been using wordpress for all my blog publication so far. You can find my old blog here. With the trend of static pages, I thought of re-inventing the backend of my blog. And here we are, you are reading my new blog based on static pages which is hosted on Github pages. In this blog post, I am going to show you what happens under the hood when I publish a new article.","text":"I recently decided to shift my gears with static pages for my blog. I have been using wordpress for all my blog publication so far. You can find my old blog here. With the trend of static pages, I thought of re-inventing the backend of my blog. And here we are, you are reading my new blog based on static pages which is hosted on Github pages. In this blog post, I am going to show you what happens under the hood when I publish a new article. I was aware that the static pages had some limits around support for comments, analytics etc. But things have progressed a quiet a bit recently. There are smart ways to achieve these and tools available to make our life simple. Therefore, blogs are moving to static pages in the developer community these days. The idea of the static pages-based blog is to keep the raw data of the blog some where and use a tool to generate the static pages for the blog. The raw data for the blog could be markdown files, JSON documents or any other meta data storing mechanism. There is plethora of tools available to convert the raw blog data to static pages. Hugo , Gatsby and Jekyllrb are a few to name. Once you have generated the static pages, you can publish the static pages in a several hosting places. A few of them are Github pages, Azure Storage Web, and AWS S3 bucket. As you can see there are plenty of options to choose from for each component. Each one of those, has its own strengths and weaknesses. If you are thinking of using static pages for your blog, best is to try a few of those and find the one that works for you. Now, let me explain you how this blog works. In very high-level, the following diagram depicts the process and what happens under the hood when I publish a new post. Firstly, I use Hexo as the static page generator. Hexo has specialized features for hosting blogs and it supports Markdown files as source. This tool simplified my comment system, analytics and RSS feeds etc. Then I built others around it. I use a Github private repo for storing my source blog metadata. I edit and author locally, then push and merge the changes to private Github repo. Then I have configured a Github action to trigger when there is a new commit to the blog source repo. It will use a build agent, install Hexo, NodeJS and other necessary dependencies, build the static pages and push them to the public blog repo. The public blog repo is configured with Github pages. Once the static pages are published, the pages will be available through the Github pages to the public internet. A new post release process is fully automated using Github actions as you can see. That is the under the hood story which generated this page you are reading today. There are themes available for Hexo which can be used to change the look and feel. I have used pure theme and customized it according how I want to look it like. I hope this post is informative for you. Hope this will convince you to start or migrate your blog over to static pages.","categories":[{"name":"DevOps","slug":"devops","permalink":"https://sameeraman.github.io/categories/devops/"},{"name":"Github","slug":"devops/github","permalink":"https://sameeraman.github.io/categories/devops/github/"}],"tags":[{"name":"Static Pages","slug":"static-pages","permalink":"https://sameeraman.github.io/tags/static-pages/"},{"name":"Github","slug":"github","permalink":"https://sameeraman.github.io/tags/github/"},{"name":"DevOps","slug":"devops","permalink":"https://sameeraman.github.io/tags/devops/"},{"name":"Hexo","slug":"hexo","permalink":"https://sameeraman.github.io/tags/hexo/"},{"name":"Github Actions","slug":"github-actions","permalink":"https://sameeraman.github.io/tags/github-actions/"}]},{"title":"Connect Ubiquiti USG to Azure VWAN Gateway using BGP","slug":"usg2vwanbgp","date":"2020-10-05T09:34:48.000Z","updated":"2020-10-17T16:23:07.980Z","comments":true,"path":"2020/10/05/usg2vwanbgp/","link":"","permalink":"https://sameeraman.github.io/2020/10/05/usg2vwanbgp/","excerpt":"In this blog post, I’m going to be sharing my knowledge that I gathered during a lab setup. Last weekend, I was playing with Ubiquiti USG BGP features and was wondering If I could establish BGP peering with my Azure VPN Gateway. This way, it could dynamically exchange routes between my home network and Azure. I typically have a hybrid networking configured between my home network and Azure. My Azure network is very dynamic, I create new VNETs and delete VNETs very often. Managing static routes in my home router and IP Sec tunnels in each setup has been very cumbersome. Therefore, my curious mind was always looking for a smarter way to do this. If you are in this same boat, join with me.","text":"In this blog post, I’m going to be sharing my knowledge that I gathered during a lab setup. Last weekend, I was playing with Ubiquiti USG BGP features and was wondering If I could establish BGP peering with my Azure VPN Gateway. This way, it could dynamically exchange routes between my home network and Azure. I typically have a hybrid networking configured between my home network and Azure. My Azure network is very dynamic, I create new VNETs and delete VNETs very often. Managing static routes in my home router and IP Sec tunnels in each setup has been very cumbersome. Therefore, my curious mind was always looking for a smarter way to do this. If you are in this same boat, join with me. In summary, BGP peering’s can be established between the Ubiquity USG and the Azure Gateway enabled with BGP. In this blog post, I’m focusing more on the USG configuration and assume that you can setup the rest of the environment by yourself. To explain how this can be setup, I’m going to use my lab as an example. Following is a diagram of my setup. Following are the key properties of the setup that you need to be aware. Home NetworkIP Addressing used in the Home network – 10.1.1.0/24Static Public IP on the USG – 113.76.252.224BGP Peering IP on the USG – 10.1.1.1 Azure Network – VWANVPN Gateway Public IP – 21.52.125.78Azure Gateway Peering IP – 10.0.1.14VWAN Hub IP Address space – 10.0.1.0/24VNET IP Address Space – 10.10.0.0/16 Note that in Azure I have used Azure VWAN for hub and spoke topology. To learn more about Azure VWAN click here. Azure VWAN Hub can have VPN Gateways. I assume that you have setup the Azure Networking piece beforehand, and I’m not going to be covering that piece in this article. You can refer to this article if you need some guidance on the VWAN hub and the VPN gateway setup. By default, it creates two VPN gateway instances. See below screenshot which displays the properties of the two gateways. In this case I have used only one gateway instance as my home network has only one gateway. Now you have all the details required for the VPN to setup. Let’s look at how to configure the USG. Unfortunately, USG configuration can’t be done via the GUI. You will need to use the advance configuration file config.gateway.json. For more details about the advanced configuration file visit this documentation.This file is in the cloud key and the location is explained in the documentation. In my case it is - /srv/unifi/data/sites/. If you are editing this for the first time, you will need to create the file. This needs to be a valid JSON file, therefore, be careful and always validate when editing this file.Add the following configuration to the file. Replace you public and local IP in here with your respective IPs. Save the configuration and do a force provision from the Cloud Key. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162&#123; &quot;system&quot;: &#123; &quot;static-host-mapping&quot;: &#123; &quot;host-name&quot;: &#123; &quot;test1.snmnest.local&quot;: &#123; &quot;alias&quot;: [ &quot;lab&quot; ], &quot;inet&quot;: [ &quot;10.1.1.13&quot; ] &#125; &#125; &#125; &#125;, &quot;interfaces&quot;: &#123; &quot;vti&quot;: &#123; &quot;vti0&quot;: &#123; &quot;mtu&quot;: &quot;1436&quot; &#125; &#125; &#125;, &quot;firewall&quot;: &#123; &quot;options&quot;: &#123; &quot;mss-clamp&quot;: &#123; &quot;interface-type&quot;: [ &quot;pppoe&quot;, &quot;pptp&quot;, &quot;vti&quot; ], &quot;mss&quot;: &quot;1350&quot; &#125; &#125; &#125;, &quot;protocols&quot;: &#123; &quot;bgp&quot;: &#123; &quot;65510&quot;: &#123; &quot;neighbor&quot;: &#123; &quot;10.0.1.14&quot;: &#123; &quot;ebgp-multihop&quot;: &quot;4&quot;, &quot;prefix-list&quot;: &#123; &quot;export&quot;: &quot;BGP&quot;, &quot;import&quot;: &quot;BGP&quot; &#125;, &quot;remote-as&quot;: &quot;65515&quot;, &quot;soft-reconfiguration&quot;: &#123; &quot;inbound&quot;: &quot;&#39;&#39;&quot; &#125;, &quot;update-source&quot;: &quot;10.1.1.1&quot; &#125; &#125;, &quot;network&quot;: &#123; &quot;10.1.1.0&#x2F;24&quot;: &quot;&#39;&#39;&quot; &#125;, &quot;timers&quot;: &#123; &quot;holdtime&quot;: &quot;180&quot;, &quot;keepalive&quot;: &quot;60&quot; &#125; &#125; &#125;, &quot;static&quot;: &#123; &quot;interface-route&quot;: &#123; &quot;10.0.1.14&#x2F;32&quot;: &#123; &quot;next-hop-interface&quot;: &#123; &quot;vti0&quot;: &quot;&#39;&#39;&quot; &#125; &#125; &#125; &#125; &#125;, &quot;policy&quot;: &#123; &quot;prefix-list&quot;: &#123; &quot;BGP&quot;: &#123; &quot;rule&quot;: &#123; &quot;10&quot;: &#123; &quot;action&quot;: &quot;deny&quot;, &quot;description&quot;: &quot;deny-localgw&quot;, &quot;prefix&quot;: &quot;113.76.252.224&#x2F;32&quot; &#125;, &quot;100&quot;: &#123; &quot;action&quot;: &quot;permit&quot;, &quot;description&quot;: &quot;permit-localsubnet&quot;, &quot;prefix&quot;: &quot;10.1.1.0&#x2F;24&quot; &#125;, &quot;110&quot;: &#123; &quot;action&quot;: &quot;permit&quot;, &quot;description&quot;: &quot;permit-remotesubnet&quot;, &quot;ge&quot;: &quot;16&quot;, &quot;prefix&quot;: &quot;10.0.0.0&#x2F;8&quot; &#125;, &quot;20&quot;: &#123; &quot;action&quot;: &quot;deny&quot;, &quot;description&quot;: &quot;deny-remotegw&quot;, &quot;prefix&quot;: &quot;21.52.125.78&#x2F;32&quot; &#125;, &quot;30&quot;: &#123; &quot;action&quot;: &quot;deny&quot;, &quot;description&quot;: &quot;deny-localpeer&quot;, &quot;prefix&quot;: &quot;10.1.1.1&#x2F;32&quot; &#125;, &quot;40&quot;: &#123; &quot;action&quot;: &quot;deny&quot;, &quot;description&quot;: &quot;deny-remotepeer&quot;, &quot;prefix&quot;: &quot;10.0.1.14&#x2F;32&quot; &#125; &#125; &#125; &#125; &#125;, &quot;vpn&quot;: &#123; &quot;ipsec&quot;: &#123; &quot;auto-firewall-nat-exclude&quot;: &quot;enable&quot;, &quot;esp-group&quot;: &#123; &quot;VWAN01&quot;: &#123; &quot;compression&quot;: &quot;disable&quot;, &quot;lifetime&quot;: &quot;27000&quot;, &quot;mode&quot;: &quot;tunnel&quot;, &quot;pfs&quot;: &quot;disable&quot;, &quot;proposal&quot;: &#123; &quot;1&quot;: &#123; &quot;encryption&quot;: &quot;aes256&quot;, &quot;hash&quot;: &quot;sha1&quot; &#125; &#125; &#125; &#125;, &quot;ike-group&quot;: &#123; &quot;VWAN01&quot;: &#123; &quot;ikev2-reauth&quot;: &quot;no&quot;, &quot;key-exchange&quot;: &quot;ikev2&quot;, &quot;lifetime&quot;: &quot;28800&quot;, &quot;proposal&quot;: &#123; &quot;1&quot;: &#123; &quot;dh-group&quot;: &quot;2&quot;, &quot;encryption&quot;: &quot;aes256&quot;, &quot;hash&quot;: &quot;sha1&quot; &#125; &#125; &#125; &#125;, &quot;site-to-site&quot;: &#123; &quot;peer&quot;: &#123; &quot;21.52.125.78&quot;: &#123; &quot;authentication&quot;: &#123; &quot;mode&quot;: &quot;pre-shared-secret&quot;, &quot;pre-shared-secret&quot;: &quot;mykeyhereplease&quot; &#125;, &quot;connection-type&quot;: &quot;respond&quot;, &quot;description&quot;: &quot;ipsec&quot;, &quot;ike-group&quot;: &quot;VWAN01&quot;, &quot;ikev2-reauth&quot;: &quot;inherit&quot;, &quot;local-address&quot;: &quot;113.76.252.224&quot;, &quot;vti&quot;: &#123; &quot;bind&quot;: &quot;vti0&quot;, &quot;esp-group&quot;: &quot;VWAN01&quot; &#125; &#125; &#125; &#125; &#125; &#125;&#125; Once the configuration is pushed. Restart the USG. Once it’s successfully restarted, ssh into the USG. Then check the BGP status using the following commands. It should show the results as below. 1show ip bgp summary 1show ip bgp neighbor 1show ip bgp neighbors 10.0.1.14 advertised-routes This command shows the routes advertised to the remote peer 1show ip bgp neighbors 10.0.1.14 received-routes This command shows the routes recieved from the remote peer 1show ip bgp 1show ip route","categories":[{"name":"Networking","slug":"networking","permalink":"https://sameeraman.github.io/categories/networking/"}],"tags":[{"name":"Networking","slug":"networking","permalink":"https://sameeraman.github.io/tags/networking/"},{"name":"VWAN","slug":"vwan","permalink":"https://sameeraman.github.io/tags/vwan/"},{"name":"Ubiquiti","slug":"ubiquiti","permalink":"https://sameeraman.github.io/tags/ubiquiti/"}]},{"title":"Web App Private Endpoints vs Service Endpoints vs App Service Environments","slug":"internalwebapphostingoptions","date":"2020-07-09T10:34:48.000Z","updated":"2020-10-17T16:23:07.976Z","comments":true,"path":"2020/07/09/internalwebapphostingoptions/","link":"","permalink":"https://sameeraman.github.io/2020/07/09/internalwebapphostingoptions/","excerpt":"Recently, I got an opportunity to compare the Private Endpoint for Web Apps, Service Endpoints for Web Apps and App Service Environments. I thought it would be good to write a blog post on the observations and the comparison I learned. Limiting the attack vector for the web applications and exposing the application only to the customer private networks is a very common requirement when you talk to customers. Therefore, this blog is about a comparison between the most commonly used hosting methods for internal-facing web applications in Azure.","text":"Recently, I got an opportunity to compare the Private Endpoint for Web Apps, Service Endpoints for Web Apps and App Service Environments. I thought it would be good to write a blog post on the observations and the comparison I learned. Limiting the attack vector for the web applications and exposing the application only to the customer private networks is a very common requirement when you talk to customers. Therefore, this blog is about a comparison between the most commonly used hosting methods for internal-facing web applications in Azure. Private Endpoints for Web AppsWith the announcement of the Private Endpoints for Web Apps, it opens up a new architecture for making Azure Web Apps available to the Azure Networks. This method creates a Private IP address in your virtual network dedicated for the Web App instance you choose. This private IP can be used as a secure entry point for the Web Application. This feature combined with external access blocked to the web app makes the application available only to the local network. The traffic originating from an end-user traverse the virtual network to the private endpoint for the web app. Then it goes through the Microsoft Backbone to the Web App. It never goes to the Public Internet. Hence, this is a much secure way to have connectivity to internal-facing web applications. The above diagram shows the high-level architecture for the private endpoint for web apps. One of the key features of this architecture is that this model works with the hybrid networking configuration as well. This means, your on-premises users can route to your web application using the private endpoint in the virtual network. This also provides additional security features. Private endpoint makes sure that only the allowed web application instance can be accessed by the private endpoint. It can not access any other service through it. Therefore, it protects you from any possible data exfiltration from your network. Note that this feature is still in public preview as of 10/07/2020. Service Endpoints for Web AppsService Endpoints for Web Apps provide secure connectivity to Azure Web apps over an optmized route over the Microsoft backbone. When compared with the Private Endpoints, Service Endpoints does not provide a private IP in your network. Instead, it will add special routes to your VNet, so that the Web App traffic will route via the Microsoft backbone to the web app. Therefore, it will not leave the Microsoft network when reaching the web app. You can also combine Service Endpoints and restrict public access to only allow traffic from the virtual networks selected. The diagram above shows the high level architecture for the Service Endpoints for web apps. One of the key functional differences in service endpoint, when compared to private endpoints, is that this provides private access to the full service in the Azure Region whereas in Private link it is only to that instance. Service endpoints are simple to configure and easier option when compared to the other two. App Service EnvironmentsAzure App Service environments provide a fully isolated and dedicated environment in a customer network to run web apps. This provisions a dedicated instance of the app hosting plan in your network as opposed to the multi-tenanted offerings in the other two option. This allows customers to fully control network traffic that goes in and out of the web app. The above high-level architecture diagram shows how the App service environment sits in the network. Providing internal access to the application is easy since it sits within the virtual network. If you have hybrid connectivity via an ExpressRoute or a Site-to-Site VPN, then it can route to the web application without any special configuration. SummaryIn this post, we looked at different architecture options for hosting a Web App which is exposed to the internal network only. See the below table, as a summary of features, functionalities and complexities discussed above. Private Endpoints Service Endpoints App Service Environments Provide Access to Web Apps over Private IP Address Provide Access to Web Apps over optimized backbone routing Web Apps are provisioned within the customer network Access is restricted per Web App Instance Access is restricted per Web app Service Access restriction up to the customer as the service is in the customer network Complexity: Planning and initial configuration required Complexity: Easy to setup Complexity: Planning and Initial configuration required In-built data exfiltration protection Traffic will need to be passed through an NVA/Firewall for exfiltration protection N/A as the application is entirely in the customer network Cost compared to the other two options: moderate Cost compared to the other two options: Can be low and depends on the application Cost compared to the other two options: Higher running cost Multi-tenant Hosting plan Multi-tenant Hosting plan Dedicated hosting plan","categories":[],"tags":[{"name":"Apps","slug":"apps","permalink":"https://sameeraman.github.io/tags/apps/"},{"name":"Networking","slug":"networking","permalink":"https://sameeraman.github.io/tags/networking/"}]},{"title":"Docker Cheat Sheet","slug":"dockercheatsheet","date":"2020-07-04T09:34:48.000Z","updated":"2020-10-17T16:23:07.976Z","comments":true,"path":"2020/07/04/dockercheatsheet/","link":"","permalink":"https://sameeraman.github.io/2020/07/04/dockercheatsheet/","excerpt":"I recently went through my second study phase around docker containers recently. Docker is a huge topic these days and widly used in the application containerization. I use Docker at home and at work in many projects. I thought it would be useful to create a Docker Cheat Sheet for my reference and share that among the community and that lead to this post. In this post, I’m going to list the most common commands used when playing with Docker containers.","text":"I recently went through my second study phase around docker containers recently. Docker is a huge topic these days and widly used in the application containerization. I use Docker at home and at work in many projects. I thought it would be useful to create a Docker Cheat Sheet for my reference and share that among the community and that lead to this post. In this post, I’m going to list the most common commands used when playing with Docker containers. General Listing Commands List all docker containers 1docker ps -a List running docker containers 1docker ps -a List docker images in the local store 1docker images Download and store an image from the internet 1docker pull ubuntu Running Docker Containers Run an instance of a container image 1docker run ubuntu Run an instance of a container image in detached mode (run in background) 1docker run -d nginx Run an instance of a Ubuntu container images with terminal and input attached. 1docker run -it ubuntu bash Stopping and Removing Docker Containers Stop a running container instance 1docker stop ubuntu Remove a terminated container (Container Id = b5a12307c030) 1docker rm b5a12307c030 Remove a container image from the local store 1docker rmi ubuntu Container interaction Run a container instance interactively 1docker run -it ubuntu bash Remote into a running container instance (Container id = b5a12307c030 ) 1docker exec -it b5a12307c030 bash Execute a command in a running container Eg: ps -eaf 1docker exec b5a12307c030 ps -eaf Map a Port to a Container Map a host port to a new container instance (Host Port = 5000, Container Port = 80, Container image = nginx)1docker run -p 80:5000 nginx -d Mount a Volume Mount a host volume to a new container (Host Volume Path = /opt/mydata, Container Mount Path = /var/lib/mysql)1docker run -v &#x2F;opt&#x2F;mydata:&#x2F;var&#x2F;lib&#x2F;mysql mysql Inspect Container Logs Inspect container logs of Container ID = b5a12307c0301docker logs b5a12307c030 Other Handy Commands Remove all excited Containers 1docker rm -f $(docker ps -q --filter &quot;status&#x3D;exited&quot;) Monitor Docker disk consumption 1docker system df","categories":[{"name":"Containers","slug":"containers","permalink":"https://sameeraman.github.io/categories/containers/"}],"tags":[{"name":"Containers","slug":"containers","permalink":"https://sameeraman.github.io/tags/containers/"},{"name":"Docker","slug":"docker","permalink":"https://sameeraman.github.io/tags/docker/"}]}],"categories":[{"name":"DevOps","slug":"devops","permalink":"https://sameeraman.github.io/categories/devops/"},{"name":"Github","slug":"devops/github","permalink":"https://sameeraman.github.io/categories/devops/github/"},{"name":"Networking","slug":"networking","permalink":"https://sameeraman.github.io/categories/networking/"},{"name":"Containers","slug":"containers","permalink":"https://sameeraman.github.io/categories/containers/"}],"tags":[{"name":"Static Pages","slug":"static-pages","permalink":"https://sameeraman.github.io/tags/static-pages/"},{"name":"Github","slug":"github","permalink":"https://sameeraman.github.io/tags/github/"},{"name":"DevOps","slug":"devops","permalink":"https://sameeraman.github.io/tags/devops/"},{"name":"Hexo","slug":"hexo","permalink":"https://sameeraman.github.io/tags/hexo/"},{"name":"Github Actions","slug":"github-actions","permalink":"https://sameeraman.github.io/tags/github-actions/"},{"name":"Networking","slug":"networking","permalink":"https://sameeraman.github.io/tags/networking/"},{"name":"VWAN","slug":"vwan","permalink":"https://sameeraman.github.io/tags/vwan/"},{"name":"Ubiquiti","slug":"ubiquiti","permalink":"https://sameeraman.github.io/tags/ubiquiti/"},{"name":"Apps","slug":"apps","permalink":"https://sameeraman.github.io/tags/apps/"},{"name":"Containers","slug":"containers","permalink":"https://sameeraman.github.io/tags/containers/"},{"name":"Docker","slug":"docker","permalink":"https://sameeraman.github.io/tags/docker/"}]}